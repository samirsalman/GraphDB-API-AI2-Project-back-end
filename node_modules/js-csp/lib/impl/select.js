'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.doAlts = doAlts;

var _get = require('lodash/get');

var _get2 = _interopRequireDefault(_get);

var _range = require('lodash/range');

var _range2 = _interopRequireDefault(_range);

var _shuffle = require('lodash/shuffle');

var _shuffle2 = _interopRequireDefault(_shuffle);

var _boxes = require('./boxes');

var _channels = require('./channels');

var _handlers = require('./handlers');

var _results = require('./results');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO: Accept a priority function or something
function doAlts( // eslint-disable-line
operations, callback, options) {
  if (operations.length === 0) {
    throw new Error('Empty alt list');
  }

  var flag = new _boxes.Box(true);
  var indexes = (0, _shuffle2.default)((0, _range2.default)(operations.length));
  var hasPriority = !!(options && options.priority);
  var result = void 0;

  var _loop = function _loop(i) {
    var operation = operations[hasPriority ? i : indexes[i]];
    var ch = void 0;

    if (operation instanceof _channels.Channel) {
      ch = operation;
      result = ch.take(new _handlers.AltHandler(flag, function (value) {
        return callback(new _results.AltResult(value, ch));
      }));
    } else {
      ch = operation[0];
      result = ch.put(operation[1], new _handlers.AltHandler(flag, function (value) {
        return callback(new _results.AltResult(value, ch));
      }));
    }

    if (result) {
      callback(new _results.AltResult(result.value, ch));
      return 'break';
    }
  };

  for (var i = 0; i < operations.length; i += 1) {
    var _ret = _loop(i);

    if (_ret === 'break') break;
  }

  if (!result && (0, _get2.default)(options, 'default') && flag.value) {
    flag.value = false;
    callback(new _results.AltResult(options.default, _results.DEFAULT));
  }
}