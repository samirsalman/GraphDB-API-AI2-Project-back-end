'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.after = exports.before = exports.afterEach = exports.beforeEach = exports.it = exports.go = exports.goAsync = exports.check = exports.identityChan = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _mocha = require('mocha');

var _mocha2 = _interopRequireDefault(_mocha);

var _csp = require('./csp');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var identityChan = exports.identityChan = function identityChan(x) {
  var ch = (0, _csp.chan)(1);

  (0, _csp.go)(_regenerator2.default.mark(function _callee() {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _csp.put)(ch, x);

          case 2:
            ch.close();

          case 3:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return ch;
};

var check = exports.check = function check(f, done) {
  try {
    f();
    done();
  } catch (e) {
    done(e);
  }
};

var goAsync = exports.goAsync = function goAsync(f) {
  return function (done) {
    (0, _csp.go)(f, [done]);
  };
};

var go = exports.go = function go(f) {
  return function (done) {
    (0, _csp.go)(_regenerator2.default.mark(function _callee2() {
      var ch;
      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              ch = (0, _csp.go)(f, []);
              _context2.next = 4;
              return (0, _csp.take)(ch);

            case 4:
              done();
              _context2.next = 10;
              break;

            case 7:
              _context2.prev = 7;
              _context2.t0 = _context2['catch'](0);

              done(_context2.t0);

            case 10:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 7]]);
    }));
  };
};

// f must be a generator function. For now assertions should be inside f's
// top-level, not functions f may call (that works but a failing test
// may break following tests).
var it = exports.it = function it(desc, f) {
  return _mocha2.default.it(desc, go(f));
};

var beforeEach = exports.beforeEach = function beforeEach(f) {
  return _mocha2.default.beforeEach(go(f));
};

var afterEach = exports.afterEach = function afterEach(f) {
  return _mocha2.default.afterEach(go(f));
};

var before = exports.before = function before(f) {
  return _mocha2.default.before(go(f));
};

var after = exports.after = function after(f) {
  return _mocha2.default.after(go(f));
};